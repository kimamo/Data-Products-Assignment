demo()
licence()
q()
library(datasets)
data(mtcars)
?abs
a <- abs(mean(mtcars[mtcars$cyl==4,]hp) - mean(mtcars[mtcars$cyl==8,]hp))
a <- abs(mean(mtcars[mtcars$cyl==4,]hp) - mean(mtcars[mtcars$cyl==8,]hp))
a <- abs(mean(mtcars[mtcars$cyl == 4,] hp) - mean(mtcars[mtcars$cyl == 8,] hp))
abs(mean(mtcars[mtcars$cyl == 4,] hp) - mean(mtcars[mtcars$cyl == 8,] hp))
abs(mean(mtcars[mtcars$cyl == 4,] ) - mean(mtcars[mtcars$cyl == 8,] ))
mean(mtcars$cyl == 4)
mean(mtcars[mtcars$cyl == 4),]
mean(mtcars[mtcars$cyl == 4,])
mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE))
mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE)
sapply(mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE))
apply(mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE))
tapply(mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE))
lapply(mean(mtcars[mtcars$cyl == 4,],, na.rm = TRUE))
hp
?hp
??hp
m1 <- mean(mtcars[mtcars$cyl == 4,], na.rm = TRUE)
m1 <- mean(mtcars[mtcars$cyl], na.rm = TRUE)
m1 <- mean(mtcars[mtcars$cyl,], na.rm = TRUE)
m1 <- mean(mtcars, na.rm = TRUE)
m1 <- lapply(mean(mtcars, na.rm = TRUE))
m1 <- sapply(mean(mtcars, na.rm = TRUE))
m1 <- apply(mean(mtcars, na.rm = TRUE))
m1 <- abs(mean(mtcars$hp[mtcars$cyl == 4,]) - mean(mtcars$hp[mtcars$cyl == 8,]))
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
data("mtcars")
data(mtcars)
names(mtcars)
mpg
attach(mtcars)
mpg
table(cyl)
barplot(cyl)
barplot(table(cyl))
stem(mpg)
hist(mpg)
boxplot(mpg)
mean(mpg)
mean(mpg, trim=.1)
summary(mpg)
sd(mpg)
IQR(mpg)
mad(mpg)
mpg[cyl==4]
mean(mpg[cyl==4])
plot(cyl,mpg)
simple.lm(cyl,mpg)
?lm
lm(cyl,mpg)
tapply(mpg,cyl,mean)
m1 <- tapply(mpg,cyl,mean)
abs(m1)
?abs
m1 <- tapply(mtcars$hp, mtcars$cyl,., mean)
m1 <- tapply(mtcars$hp, mtcars$cyl, mean)
m1
abs(m1[8],m1[4])
abs(m1)
m1[8]-m1[4]
m1["8"]-m1["4"]
swirl()
libraly(swirl)
install.packages("swirl")
libraly(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list,class)
cls_vect<- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lappy(flags)
lappy(flags,unique())
lapply(flags,unique())
unique_vals <- lapply(flags, unique)
unique_vals
length((unique_vals))
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem)elem[2])
str(flags)
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants ,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
sample(letters)
letters
LETTERS
sample(LETTERS)
flips <- sample(1:100,c(1,0), replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(1,0), 1:100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(1,0), 100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob = 0.7)
rbinom(1:100,size=100,prob = 0.7)
rbinom(n=100,size=100,prob = 0.7)
rbinom(n=100,size=1,prob = 0.7)
flips2 <- rbinom(n=100,size=1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5)
rpois(5, 10)
my_pois <- replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm - colMeans(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
rm(list=ls())
ls()
getwd()
setwd("~/Coursera/Data Science Specialization/exploratory-data-analysis")
ls()
setwd("~/Coursera/Data Science Specialization/exploratory-data-analysis/ExData_Plotting1")
ls()
setwd("~/Coursera/Data Science Specialization")
swirl()
library(swirl)
kimamo
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm, col = "green")
swirl()
rug(ppm)
head(low)
low
high
hist(ppm, col = "green", break = 100)
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm), lwd=4, col = "magenta")
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Coutries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
with (pollution,{ boxplot(pm25~region, col="red")})
boxplot(pm25~region, col="red", data = pollution)
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution,pollution$region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "greeen")
hist(east$pm25, col = "green")
hist(subset(pollution,region=="east"), col = "green")
hist(subset(pollution,region="east"), col = "green")
hist(subset(pollution$pm25,region="east"), col = "green")
hist(subset(pollution$pm25,region=="east"), col = "green")
hist(subset(pollution$pm25,pollution$region=="east"), col = "green")
hist(subset(pollution$pm25,pollution$region=="west"), col = "green")
hist(subset(pollution , region=="west")$pm25, col = "green")
plot(pollution)
with(pollution, plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm, col=pollution$region))
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with (faithful, plot(eruptions, waiting)
)
title("Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with (faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with (faithful, plot(eruptions, waiting), title ="Old Faithful Geyser data")
with (faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot(displ, hwy, data=mpg)
head(mpg)
ggplot(displ , hwy, data= mpg)
ggplot(displ , hwy, data = mpg)
gplot(displ , hwy, data = mpg)
ggplot(displ , hwy, data = mpg)
ggplot(mpg$displ , mpg$hwy)
ggplot(mpg$displ , mpg$hwy, environment = environment
)
ggplot(displ , hwy, data = mpg)
ggplot(data = mpg, displ , hwy)
head(mpg)
ggplot(displ, hwy, data = mpg)
ggplot(aes(displ, hwy), data = mpg)
gqplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
quartz()
swirl()
library(swirl)
swirl()
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month,airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red", main = "Ozone and Wind in New York City"
)
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par('lty')
plot(airquality$Wind,airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality[airquality$Month==5],)
may <- subset(airquality, subset = (airquality$Month==5))
may <- subset(airquality, Month==5)
points(Wind,Ozone,may)
points(may,Wind,Ozone)
points(may$Wind,may$Ozone)
points(may$Wind,may$Ozone,col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
names(pch)
pch
points(notmay$Wind,notmay$Ozone,col="red", pch=17)
points(notmay$Wind,notmay$Ozone,col="red", pch=8)
legend("topright",pch = c(17,8),col =c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2,lwd=2)
par(mfro=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,2), oma=c(0,0,2,0))
par(mfrow = c(1,3),  mar = c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone, title= "Ozone and Wind")
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer = TRUE)
nrow(training.clean)
head(allData)
dim(training.clean)
clear
clear()
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
s = c("aa", "bb", "cc", "dd", "ee")
x = list(n, s, b, 3)   # x contains copies of n, s, b
x = list(n, s, b, 3)
x = list(n, s,  3)
x[2]
projDir <- getwd()
filename <- "Georgia Cities.csv"
dataDir <- paste(projDir,"data",sep = "/")
csvFilePath <- paste(dataDir,filename,sep = "/")
df <- as.data.frame( read.csv(csvFilePath, header=TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
##  create the map
ui = fluidPage(leafletOutput('mapOfAllGACities'))
server <- function(input, output){
output$mapOfAllGACities <- renderLeaflet({
leaflet(df) %>%
addTiles()%>%
addProviderTiles("GA Cities",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = df,lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
projDir <- getwd()
filename <- "Georgia Cities.csv"
dataDir <- paste(projDir,"data",sep = "/")
csvFilePath <- paste(dataDir,filename,sep = "/")
df <- as.data.frame( read.csv(csvFilePath, header=TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
##  create the map
ui = fluidPage(leafletOutput('mapOfAllGACities'))
server <- function(input, output){
output$mapOfAllGACities <- renderLeaflet({
leaflet(df) %>%
addTiles()%>%
addProviderTiles("GA Cities",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = df,lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
projDir <- getwd()
filename <- "Georgia Cities.csv"
dataDir <- paste(projDir,"data",sep = "/")
csvFilePath <- paste(dataDir,filename,sep = "/")
df <- as.data.frame( read.csv(csvFilePath, header=TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
##  create the map
ui = fluidPage(leafletOutput('mapOfAllGACities'))
server <- function(input, output){
output$mapOfAllGACities <- renderLeaflet({
leaflet(df) %>%
addTiles()%>%
## setView(-70.09, 127.78, zoom = 13) %>%
addProviderTiles("GA Cities",
options = providerTileOptions(noWrap = TRUE)
) %>%
addCircleMarkers(data = df,lat = ~latitude, lng = ~longitude ,popup = df$Location) ## %>%
})
}
shinyApp(ui, server)
) %>%
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
projDir <- getwd()
filename <- "Georgia Cities.csv"
dataDir <- paste(projDir,"data",sep = "/")
csvFilePath <- paste(dataDir,filename,sep = "/")
df <- as.data.frame( read.csv(csvFilePath, header=TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
head(df)
ui = fluidPage(leafletOutput('mapOfAllGACities'))
server <- function(input, output){
output$mapOfAllGACities <- renderLeaflet({
leaflet(df) %>%
addTiles()%>%
## setView(-70.09, 127.78, zoom = 13) %>%
addProviderTiles("GA Cities",
options = providerTileOptions(noWrap = TRUE)
) %>%
addCircleMarkers(data = df,lat = ~latitude, lng = ~longitude  ) ## %>%
})
}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
projDir <- getwd()
filename <- "Georgia Cities.csv"
dataDir <- paste(projDir,"data",sep = "/")
csvFilePath <- paste(dataDir,filename,sep = "/")
df <- as.data.frame( read.csv(csvFilePath, header=TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
##  create the map
ui = fluidPage(leafletOutput('mapOfAllGACities'))
server <- function(input, output){
output$mapOfAllGACities <- renderLeaflet({
leaflet(df) %>%
addTiles()%>%
## setView(-70.09, 127.78, zoom = 13) %>%
# addProviderTiles("GA Cities",
#                  options = providerTileOptions(noWrap = TRUE)
# ) %>%
addCircleMarkers(data = df,lat = ~latitude, lng = ~longitude  ) ## %>%
})
}
shinyApp(ui, server)
gaMap
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setView(df, lng = -84.423142,lat = 33.762652, zoom = 11) %>%  #Atlanta city,33.762652,-84.423142
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("rgdal", "maptools", "leaflet", "htmlwidgets"),
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("rgdal", "maptools", "leaflet", "htmlwidgets"),
install.packages(c("rgdal", "maptools", "leaflet", "htmlwidgets"), dependencies = TRUE)
# load libraries
library(shiny)
library(leaflet)
library(rgdal)
library(maptools)
install.packages("maptools")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Coursera/Data Science Specialization/data products/Week2Assignment/mapOfCitiesOfGA.R')
source('~/Google Drive/Coursera/Data Science Specialization/data products/Week2Assignment/mapOfCitiesOfGA_shiny.R')
print(source('mapOfCitiesOfGA_shiny.R')$value)
print(source('mapOfCitiesOfGA_shiny.R')$value)
print(source('mapOfCitiesOfGA_shiny.R')$value)
print(source('mapOfCitiesOfGA_shiny.R')$value)
source('~/Google Drive/Coursera/Data Science Specialization/data products/Week2Assignment/mapOfCitiesOfGA_shiny.R')
source('~/Google Drive/Coursera/Data Science Specialization/data products/Week2Assignment/mapOfCitiesOfGA_shiny.R')
print(source('mapOfCitiesOfGA_shiny.R')$value)
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
